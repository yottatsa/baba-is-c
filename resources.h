#define B8(d) ((unsigned char)B8__(HEX__(d)))
#define B_0000    0
#define B_0001    1
#define B_0010    2
#define B_0011    3
#define B_0100    4
#define B_0101    5
#define B_0110    6
#define B_0111    7
#define B_1000    8
#define B_1001    9
#define B_1010    a
#define B_1011    b
#define B_1100    c
#define B_1101    d
#define B_1110    e
#define B_1111    f

#define _B2H(bits)    B_##bits
#define B2H(bits)    _B2H(bits)
#define _HEX(n)        0x##n
#define HEX(n)        _HEX(n)
#define _CCAT(a,b)    a##b
#define CCAT(a,b)   _CCAT(a,b)

#define BYTE(a,b)        HEX( CCAT(B2H(a),B2H(b)) )

unsigned char sprites[] = {
	// ....
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),

	// baba icon
	BYTE(0001,0100),
	BYTE(0111,1100),
	BYTE(1110,1010),
	BYTE(1111,1110),
	BYTE(1111,1110),
	BYTE(1010,0100),
	BYTE(0000,0000),
	BYTE(0000,0000),

	// rock icon
	BYTE(0000,0000),
	BYTE(0001,1000),
	BYTE(0011,0100),
	BYTE(0111,0010),
	BYTE(0110,1010),
	BYTE(0111,1110),
	BYTE(0011,1100),
	BYTE(0000,0000),

	// wall icon
	BYTE(1111,1111),
	BYTE(1000,1000),
	BYTE(1111,1111),
	BYTE(0010,0010),
	BYTE(1111,1111),
	BYTE(0100,0100),
	BYTE(1111,1111),
	BYTE(0001,0001),

	// flag icon
	BYTE(0000,0000),
	BYTE(0111,1100),
	BYTE(0101,1100),
	BYTE(0111,1100),
	BYTE(0100,0000),
	BYTE(0100,0000),
	BYTE(0100,0000),
	BYTE(0000,0000),

	// water icon
	BYTE(0000,0110),
	BYTE(1111,1001),
	BYTE(0000,0000),
	BYTE(0011,1100),
	BYTE(1100,0111),
	BYTE(0000,0000),
	BYTE(0001,1111),
	BYTE(1110,0000),

	// key icon
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(1100,0000),
	BYTE(1011,1110),
	BYTE(1110,1010),
	BYTE(1100,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),

	// door icon
	BYTE(0111,1100),
	BYTE(1100,0110),
	BYTE(1000,0010),
	BYTE(1000,1010),
	BYTE(1000,0010),
	BYTE(1000,0010),
	BYTE(1111,1110),
	BYTE(0000,0000),

	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	
	// baba
	BYTE(1100,0100),
	BYTE(1110,1110),
	BYTE(1100,1010),
	BYTE(0000,0000),
	BYTE(1100,0100),
	BYTE(1110,1110),
	BYTE(1100,1010),
	BYTE(0000,0000),

	// rock
	BYTE(1100,1110),
	BYTE(1110,1010),
	BYTE(1010,1110),
	BYTE(0000,0000),
	BYTE(0110,1010),
	BYTE(1000,1100),
	BYTE(0110,1010),
	BYTE(0000,0000),

	// wall
	BYTE(1010,0100),
	BYTE(1110,1110),
	BYTE(1110,1010),
	BYTE(0000,0000),
	BYTE(1000,1000),
	BYTE(1000,1000),
	BYTE(1110,1110),
	BYTE(0000,0000),

	// flag
	BYTE(1110,1000),
	BYTE(1100,1000),
	BYTE(1000,1110),
	BYTE(0000,0000),
	BYTE(0100,1100),
	BYTE(1110,1010),
	BYTE(1010,1110),
	BYTE(0000,0000),

	// watr
	BYTE(1010,0100),
	BYTE(1110,1110),
	BYTE(1110,1010),
	BYTE(0000,0000),
	BYTE(1110,1100),
	BYTE(0100,1110),
	BYTE(0100,1010),
	BYTE(0000,0000),

	// key
	BYTE(1010,1110),
	BYTE(1100,1100),
	BYTE(1010,1110),
	BYTE(0000,0000),
	BYTE(1010,0000),
	BYTE(0100,0000),
	BYTE(0100,0000),
	BYTE(0000,0000),


	// door
	BYTE(1100,1110),
	BYTE(1010,1010),
	BYTE(1100,1110),
	BYTE(0000,0000),
	BYTE(1110,1100),
	BYTE(1010,1110),
	BYTE(1110,1010),
	BYTE(0000,0000),

	// you
	BYTE(0101,0001),
	BYTE(0001,0101),
	BYTE(1011,0001),
	BYTE(1111,1111),
	BYTE(1101,0111),
	BYTE(1101,0111),
	BYTE(1100,0111),
	BYTE(1111,1111),

	// win
	BYTE(0101,0001),
	BYTE(0001,1011),
	BYTE(0001,0001),
	BYTE(1111,1111),
	BYTE(1100,1111),
	BYTE(1101,0111),
	BYTE(1101,0111),
	BYTE(1111,1111),

	// stop
	BYTE(1001,0001),
	BYTE(1011,1011),
	BYTE(0011,1011),
	BYTE(1111,1111),
	BYTE(0001,0001),
	BYTE(0101,0001),
	BYTE(0001,0111),
	BYTE(1111,1111),

	// push
	BYTE(0001,0101),
	BYTE(0001,0101),
	BYTE(0111,0001),
	BYTE(1111,1111),
	BYTE(1001,0101),
	BYTE(1011,0001),
	BYTE(0011,0101),
	BYTE(1111,1111),

	// lock/shut
	BYTE(0111,0001),
	BYTE(0111,0101),
	BYTE(0001,0001),
	BYTE(1111,1111),
	BYTE(0001,0101),
	BYTE(0111,0011),
	BYTE(0001,0101),
	BYTE(1111,1111),


	// open
	BYTE(0001,0001),
	BYTE(0101,0001),
	BYTE(0001,0111),
	BYTE(1111,1111),
	BYTE(0001,0011),
	BYTE(0011,0101),
	BYTE(0001,0101),
	BYTE(1111,1111),

	// sink
	BYTE(1001,0001),
	BYTE(1011,1011),
	BYTE(0011,0001),
	BYTE(1111,1111),
	BYTE(0011,0101),
	BYTE(0101,0011),
	BYTE(0101,0101),
	BYTE(1111,1111),

	// lose
	BYTE(0111,0001),
	BYTE(0111,0101),
	BYTE(0001,0001),
	BYTE(1111,1111),
	BYTE(1001,0001),
	BYTE(1011,0011),
	BYTE(0011,0001),
	BYTE(1111,1111),

	// hot
	BYTE(0101,0001),
	BYTE(0001,0101),
	BYTE(0101,0001),
	BYTE(1111,1111),
	BYTE(1100,0111),
	BYTE(1110,1111),
	BYTE(1110,1111),
	BYTE(1111,1111),

	// melt
	BYTE(0001,0001),
	BYTE(0001,0011),
	BYTE(0101,0001),
	BYTE(1111,1111),
	BYTE(0111,0001),
	BYTE(0111,1011),
	BYTE(0001,1011),
	BYTE(1111,1111),



	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),


	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	
	// lava icon
	BYTE(1101,1111),
	BYTE(1001,1101),
	BYTE(1010,1001),
	BYTE(1111,1010),
	BYTE(1011,1111),
	BYTE(0011,1011),
	BYTE(0101,0011),
	BYTE(1111,0101),

	// lava
	BYTE(1000,0100),
	BYTE(1000,1110),
	BYTE(1110,1010),
	BYTE(0000,0000),
	BYTE(1010,0100),
	BYTE(1010,1110),
	BYTE(0110,1010),
	BYTE(0000,0000),


	// has
	BYTE(1010,0100),
	BYTE(1110,1110),
	BYTE(1010,1010),
	BYTE(0000,0000),
	BYTE(0001,1000),
	BYTE(0001,0000),
	BYTE(0011,0000),
	BYTE(0000,0000),

	// is
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(0000,0000),
	BYTE(1110,0110),
	BYTE(0100,0100),
	BYTE(1110,1100),
	BYTE(0000,0000),
	BYTE(0000,0000),


};
